parameters:
  consensus: ['CFT', 'BFT']
  target: ['NoSGX', 'SGX']

  env:
    Checks:
      container: nosgx
      pool: Ubuntu-1804-D8s_v3
    NoSGX:
      container: nosgx
      pool: Ubuntu-1804-D8s_v3
      dependsOn: ['Formatting_and_License_Checks']
    SGX:
      container: sgx
      pool: Ubuntu-1804-DC8_v2
      dependsOn: ['Formatting_and_License_Checks']
    SAN:
      container: nosgx
      pool: Ubuntu-1804-D16s_v3
      dependsOn: ['Formatting_and_License_Checks']
    Release:
      container: sgx
      pool: Ubuntu-1804-DC4s
      dependsOn: ['Formatting_and_License_Checks']
    Metrics:
      container: nosgx
      pool: Ubuntu-1804-D8s_v3
      dependsOn: ['Test_SGX_CFT_Perf', 'Test_SGX_BFT_Perf']
    Publish:
      container: nosgx
      pool: Ubuntu-1804-D8s_v3
      dependsOn: ['Test_SGX_CFT_Release', 'Test_SGX_BFT_Release']
    Perf:
      pool: CCF-Perf
      dependsOn: ['Formatting_and_License_Checks']

  build:
    common:
      cmake_args: '-DCMAKE_C_COMPILER_LAUNCHER="ccache" -DCMAKE_CXX_COMPILER_LAUNCHER="ccache"'
    NoSGX:
      cmake_args: '-DTARGET=virtual -DCOVERAGE=ON'
    SGX:
      cmake_args: ''
    debug:
      cmake_args: '-DCMAKE_BUILD_TYPE=Debug -DVERBOSE_LOGGING=ON -DBUILD_SMALLBANK=OFF'
    install:
      install_prefix: '/tmp/ccf-install'
      cmake_args: '-DCMAKE_INSTALL_PREFIX=/tmp/ccf-install'
    san:
      cmake_args: '-DSAN=ON'
    perf:
      cmake_args: '-DVERBOSE_LOGGING=ON -DDISTRIBUTE_PERF_TESTS="`../.nodes.sh`"'

  test:
    NoSGX:
      ctest_args: '-LE "benchmark|perf|suite"'
    SGX:
      ctest_args: '-LE "benchmark|perf"'
    Release:
      ctest_args: '-LE "benchmark|perf"'
    perf:
      ctest_args: '-L "benchmark|perf"'
    san:
      ctest_args: '-LE "benchmark|perf|suite"'
    BFT:
      ctest_args: '-LE "raft"'
    CFT:
      ctest_args: '-LE "pbft"'

jobs:
  - template: checks.yml
    parameters:
      env: ${{ parameters.env.Checks }}
      job_name: 'Formatting_and_License_Checks'
  
  - ${{ each target in parameters.target }}:
    - template: common_build.yml
      parameters:
        target: '${{ target }}'
        env: ${{ parameters.env[target] }}
        cmake_args: '${{ parameters.build.common.cmake_args }} ${{ parameters.build.debug.cmake_args }} ${{ parameters.build[target].cmake_args }}'
        suffix: 'Debug'
        artifact_name: '${{ build_target }}_Debug'

  # Debug test runs with code coverage
  - ${{ each target in parameters.target }}:
    - ${{ each consensus in parameters.consensus }}:
      - template: common_test.yml
        parameters:
          target: ${{ target }}
          consensus: ${{ consensus }}
          env: ${{ parameters.env[target] }}
          cmake_args: '${{ parameters.build.common.cmake_args }} ${{ parameters.build.debug.cmake_args }} ${{ parameters.build[target].cmake_args }}'
          ctest_filter: '${{ parameters.test[target].ctest_args }} ${{ parameters.test[consensus].ctest_args }}'
          suffix: 'Debug'
          artifact_name: 'Build_${{ target }}_Debug'
          depends_on: 'Build_${{ target }}_Debug'

  # SAN build (ASAN & UBSAN)
  - template: common_build.yml
    parameters:
      target: NoSGX
      env: ${{ parameters.env.SAN }}
      cmake_args: '${{ parameters.build.common.cmake_args }} ${{ parameters.build.san.cmake_args }} ${{ parameters.build.NoSGX.cmake_args }}'
      suffix: 'SAN'
      artifact_name: 'Build_NoSGX_SAN'

  # SAN Tests
  - ${{ each consensus in parameters.consensus }}:
    - template: common_test.yml
      parameters:
        target: NoSGX
        consensus: ${{ consensus }}
        env: ${{ parameters.env.SAN }}
        cmake_args: '${{ parameters.build.common.cmake_args }} ${{ parameters.build.san.cmake_args }} ${{ parameters.build.NoSGX.cmake_args }}'
        ctest_filter: '${{ parameters.test.san.ctest_args }} ${{ parameters.test[consensus].ctest_args }}'
        suffix: 'SAN'
        artifact_name: 'Build_NoSGX_SAN'
        depends_on: 'Build_NoSGX_SAN'

  # Performance build
  - template: common_build.yml
    parameters:
      target: SGX
      env: ${{ parameters.env.Perf }}
      cmake_args: '${{ parameters.build.common.cmake_args }} ${{ parameters.build.install.cmake_args }} ${{ parameters.build.SGX.cmake_args }} ${{ parameters.build.perf.cmake_args }}'
      suffix: 'Perf'
      artifact_name: 'Build_SGX_Perf'

  
  # Performance tests
  - ${{ each consensus in parameters.consensus }}:
      - template: common_test.yml
        parameters:
          target: SGX
          consensus: ${{ consensus }}
          env: ${{ parameters.env.Perf }}
          install_prefix: '${{ parameters.install.install_prefix }}'
          cmake_args: '${{ parameters.build.common.cmake_args }} ${{ parameters.build.install.cmake_args }} ${{ parameters.build.SGX.cmake_args }} ${{ parameters.build.perf.cmake_args }}'
          ctest_filter: '${{ parameters.test.perf.ctest_args }} ${{ parameters.test[consensus].ctest_args }}'
          suffix: 'Perf'
          artifact_name: 'Build_SGX_Perf'
          depends_on: 'Build_SGX_Perf'

  # Collect and Plot metrics
  - template: metrics.yml
    parameters:
      env: ${{ parameters.env.Metrics }}

  # Publish release
  - ${{ if eq(parameters.perf_or_release, 'release') }}:
    # Release build
    - template: common_build.yml
      parameters:
        target: SGX
        env: ${{ parameters.env.Release }}
        cmake_args: '${{ parameters.build.common.cmake_args }} ${{ parameters.build.install.cmake_args }} ${{ parameters.build.SGX.cmake_args }}'
        suffix: 'Release'
        artifact_name: 'Build_SGX_Release'

    # Release builds
    - ${{ each consensus in parameters.consensus }}:
      - template: common_test.yml
        parameters:
          target: SGX
          consensus: ${{ consensus }}
          env: ${{ parameters.env.Release }}
          install_prefix: '${{ parameters.build.install.install_prefix }}'
          cmake_args: '${{ parameters.build.common.cmake_args }} ${{ parameters.build.install.cmake_args }} ${{ parameters.build.SGX.cmake_args }}'
          ctest_filter: '${{ parameters.test.Release.ctest_args }} ${{ parameters.test[consensus].ctest_args }}'
          suffix: 'Release'
          artifact_name: 'Build_SGX_Release'
          depends_on: 'Build_SGX_Release'

    - template: release.yml
      parameters:
        env: ${{ parameters.env.Publish }}

