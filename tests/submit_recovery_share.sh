#!/bin/bash
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache 2.0 License.

set -e

function usage()
{
    echo "Usage:"""
    echo "  $0 --rpc-address=node_rpc_address --member-enc-privk=member_enc_privk.pem --network-enc-pubk=network_enc_pubk.pem [CURL_OPTIONS]"
    echo "Retrieves the encrypted recovery share for a given member, decrypts the share and submit the share to initiate the end of the recovery protocol."
    echo "Note: Requires step CLI."
}

while [ "$1" != "" ]; do
    case $1 in
        -h|-\?|--help)
            usage
            exit 0
            ;;
        --rpc-address)
            node_rpc_address="$2"
            ;;
        --member-enc-privk)
            member_enc_privk="$2"
            ;;
        --network-enc-pubk)
            network_enc_pubk="$2"
            ;;
        *)
            break
    esac
    shift
    shift
done

if ! [ -x "$(command -v step)" ]; then
    echo "Error: step CLI is not installed on your system or not in your path."
    echo "See https://microsoft.github.io/CCF/master/members/accept_recovery.html#submitting-recovery-shares"
    exit 1
fi

if [ -z "$node_rpc_address" ]; then
    echo "Error: No node RPC address in arguments (--rpc-address)"
    exit 1
fi

if [ -z "$member_enc_privk" ]; then
    echo "Error: No member encryption private key in arguments (--member-enc-privk)"
    exit 1
fi

if [ -z "$network_enc_pubk" ]; then
    echo "Error: No defunct network encryption public key in arguments (--network-enc-pubk)"
    exit 1
fi

# TODO: Check for errors, probably using ||

# Retrieve encrypted recovery share and nonce
resp=$(curl -sS https://${node_rpc_address}/members/getEncryptedRecoveryShare ${@})
encrypted_share="$(echo ${resp} | jq -r .encrypted_recovery_share)"
nonce="$(echo ${resp} | jq -r .nonce)"

# GOOD
# encrypted_share="gITiie6qa28H7HccwsxfhhFOzK82d2o2dX9iT+ozK4P9PtMrisPehByE1g2bGzh1sCHuUwQYpv3nME/jIuG6qfj2AQDNZMHebA/BW5ZNvc4ZsxLV4uvtS6zkpQ0yj4JOUnmSRqm/5FSG2H/L+8m+wsX8PdMSBJfqsnaFewIsiwhW"

# BAD
# encrypted_share="AJBL0MSkenXochLnUrW2SQ0Cb8kzapfULv7e4I+CO+tDQwDSxAh+TRN1"

# # GOOD
# nonce="iCsAvndW5us2wTLZG70khtMrTlhP0OK4"

# BAD
# nonce="NlkAqQvA2RLG+xWFSrw+JNP3yAy8Vq5Z"


echo "Encrypted recovery share: ${encrypted_share}"
echo "Nonce: ${nonce}"

# Parse raw private key from SubjectPublicKeyInfo DER format, as generated by keygenerator.sh --gen-enc-key
der_header_privk_len=14
openssl asn1parse -in ${member_enc_privk} -strparse ${der_header_privk_len} -out key.raw -noout

# Parse raw public key generated by network
der_header_pubk_len=9
openssl asn1parse -in ${network_enc_pubk} -i -strparse ${der_header_pubk_len} -out key2.raw -noout

# printf "${nonce}" | base64 -d
# exit 0


# set -x

# Decrypt encrypted share with nonce, member private key and previous network public key

# decrypted_share=$(echo -n "${encrypted_share}" | openssl base64 -d | step crypto nacl box open "$(echo -n ${nonce} | openssl base64 -d)" key2.raw key.raw -raw | openssl base64 -A)

# echo ${nonce} | openssl base64 -d | xargs --null echo "${encrypted_share}" | openssl base64 -d | step crypto nacl box open '{}' key2.raw key.raw -raw

# echo "$(echo -ne ${nonce} | openssl base64 -d)"

# echo ""

# Works:
# echo "bGFsYQo=" | openssl base64 -d | xargs -I{} sh -c "echo \"p91/FnEWQWWc1pWUc/dOuOFW6tB602A9\" | openssl base64 -d | step crypto nacl box open {} alice.pub bob.priv -raw"

# echo "$nonce" | openssl base64 -d | xargs --null -I{} echo $"{encrypted_share}" | openssl base64 -d | step crypto nacl box open {} key2.raw key.raw -raw


# nonce="fi2rgnUTTRcvukMaMLYAkG7NScQ5q32e"
# var=$(echo -n "$nonce" | base64 -d | xargs --null -I {} sh -c "echo {} | hd")
# echo "var: $var"

# # set -x
# decrypted_share1=$(echo -n ${nonce} | base64 -d | xargs --null -I '{}' sh -c "echo "${encrypted_share}" | base64 -d | step crypto nacl box open \"{}\" key2.raw key.raw -raw | openssl base64 -A")
# set +x

# # echo ${nonce} | openssl base64 -d | xargs -I{} sh -c "echo {}"

echo "Decrypted share: ${decrypted_share1}"

# # Orign:
# decrypted_share=$(echo "${encrypted_share}" | openssl base64 -d | step crypto nacl box open "$(echo ${nonce} | openssl base64 -d)" key2.raw key.raw -raw | openssl base64 -A)

# echo ${decrypted_share}

# decrypted_share_base64=$(echo ${decrypted_share} | openssl base64 -A)

# echo "${decrypted_share}"


# # Finally. submit encrypted share
# curl https://${node_rpc_address}/members/submitRecoveryShare ${@} -H "Content-Type: application/json" -d '{"recovery_share": "'${decrypted_share}'"}'

# echo ""