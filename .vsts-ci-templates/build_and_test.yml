steps:
- checkout: self
  clean: true
  submodules: true

- task: CMake@1
  displayName: CMake
  inputs:
    cmakeArgs: '-GNinja ..'

- script: ninja
  displayName: Ninja
  workingDirectory: build

- script: |
    python3.7 -m venv env
    source env/bin/activate
    pip install -U -r ../tests/requirements.txt
    ctest -VV --timeout 240 --no-compress-output -T Test -R ds_test
  displayName: CTest
  workingDirectory: build

- script: 'xsltproc --stringparam suiteName "$(Agent.MachineName)" ../tests/infra/ctest_to_junit.xslt Testing/*/Test.xml > JUnit.xml'
  displayName: XSLT
  workingDirectory: build
  condition: succeededOrFailed()

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/JUnit.xml'
    publishRunAttachments: true
  condition: succeededOrFailed()

# - script: |
#     ls *_test | xargs -n1 -I '{}' llvm-profdata-7 merge {}.profraw -o {}.profdata
#     ls *_test | xargs -n1 -I '{}' sh -c 'printf "\n*** Binary: {} ***\n "; llvm-cov-7 report -object {} -instr-profile {}.profdata -ignore-filename-regex="(boost|openenclave|3rdparty|/test/)"'
#   displayName: Coverage
#   workingDirectory: build

- script: |
    ls | grep profraw | xargs -n1 > prof_files
    llvm-profdata-7 merge -sparse -f prof_files -o coverage.profdata
    objects=""; for f in *_test; do objects=$objects" -object $f"; done; llvm-cov-7 show -instr-profile coverage.profdata -output-dir=coverage -format=html ds_test $objects -Xdemangler c++filt -Xdemangler -n -ignore-filename-regex="(boost|openenclave|3rdparty|/test/)"
  displayName: CoverageGeneration
  workingDirectory: build

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/build/../src/tests/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/build/coverage'
  condition: succeededOrFailed()
