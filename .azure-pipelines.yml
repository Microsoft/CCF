trigger:
  batch: true
  branches:
    include:
      - "master"
      - "ci/*"
  paths:
    exclude:
      - 'README.md'
      - 'CCF-TECHNICAL-REPORT.pdf'
      - 'Doxyfile'
      - 'THIRD_PARTY_NOTICES.txt'
      - 'getting_started/'
      - 'sphinx/'
      - '.github/'
      - '.azure-pipelines-gh-pages.yml'
      - 'LICENSE'

pr:
  autoCancel: true
  branches:
    include:
      - master
  paths:
    include:
      - '*'
    exclude:
      - 'README.md'
      - 'CCF-TECHNICAL-REPORT.pdf'
      - 'Doxyfile'
      - 'THIRD_PARTY_NOTICES.txt'
      - 'getting_started/'
      - 'sphinx/'
      - '.github/'
      - '.azure-pipelines-gh-pages.yml'
      - 'LICENSE'

schedules:
- cron: "0 3 * * Mon-Fri"
  displayName: Daily morning build
  branches:
    include:
    - master
  always: true

parameters:
  consensus: ['CFT', 'BFT']
  target: ['NoSGX', 'SGX']

  env:
    NoSGX:
      container:
        image: ccfciteam/ccf-ci-18.04-oe-0.7.0-rc1-nosgx:latest
        options: --publish-all
      pool: Ubuntu-1804-D8s_v3
    SGX:
      container:
        image: ccfciteam/ccf-ci-18.04-oe-0.7.0-rc1-sgx:latest
        options: --publish-all --device /dev/sgx:/dev/sgx
      pool: Ubuntu-1804-DC4s

  build:
    NoSGX:
      cmake_args: '-DTARGET=virtual'
    SGX:
      cmake_args: ''
    BFT:
      cmake_args: '-DPBFT=ON'
    CFT:
      cmake_args: ''

jobs:
- job: Checks
  pool: Ubuntu-1804-D8s_v3
  container:
    image: ccfciteam/ccf-ci-18.04-oe-0.7.0-rc1-nosgx:latest
  steps:
    - checkout: self
      clean: true
      submodules: true

    - script: find . -regex ".*\.sh$" | xargs shellcheck -s bash -e SC2044,SC2002,SC1091
      displayName: 'Shell Check'

    - script: python3.7 notice-check.py
      displayName: 'Check CCF copyright notices'

    - script: python3.7 notice-check.py
      workingDirectory: ePBFT
      displayName: 'Check ePBFT copyright notices'

    - script: ./check-format.sh src samples ePBFT/src
      displayName: 'Check C++ code format'

    - script: |
        python3.7 -m venv env
        source env/bin/activate
        pip install black
        black --check sphinx/ tests/ notice-check.py
      displayName: 'Check Python code format'

  - ${{ each target in parameters.target }}:
    - ${{ each consensus in parameters.consensus }}:
      - job: Build_${{ target }}_${{ consensus }}

        steps:
          - checkout: self
            clean: true
            submodules: true

    # - template: .azure-pipelines-templates/build.yml
    #   parameters:
    #     cmake_args: '$(cmake_args)'
    # - template: .azure-pipelines-templates/test.yml
    #   parameters:
    #     ctest_filter: '-LE "perf|end_to_end"'
    #     suite_name_suffix: '$(name) quick tests'
    # - template: .azure-pipelines-templates/test.yml
    #   parameters:
    #     ctest_filter: '-L end_to_end -I 0,,2'
    #     suite_name_suffix: '$(name) SGX end to end tests A'
    # - template: .azure-pipelines-templates/test.yml
    #   parameters:
    #     ctest_filter: '-L end_to_end -I 1,,2'
    #     suite_name_suffix: '$(name) SGX end to end tests B'

# - job: ACC_1804_SGX_build
#   pool: Ubuntu-1804-DC4s
#   container:
#     image: ccfciteam/ccf-ci-18.04-oe-0.7.0-rc1-sgx:latest
#     # --publish-all enables end-to-end tests to communicate over ports
#     # --device /dev/sgx:/dev/sgx makes sgx available to the container
#     # -v $(log.path):$(log.path) mounts the local directory to the same path in the container
#     options: --publish-all --device /dev/sgx:/dev/sgx -v $(log.path):$(log.path)
#   steps:
#     - checkout: self
#       clean: true
#       submodules: true
#     - template: .azure-pipelines-templates/build.yml
#       parameters:
#         cmake_args: '-DBUILD_SMALLBANK=OFF'
#     - template: .azure-pipelines-templates/publish_build.yml
#       parameters:
#         artifact_name: build_results

# - job: ACC_1804_SGX_quick_tests
#   pool: Ubuntu-1804-DC4s
#   container:
#     image: ccfciteam/ccf-ci-18.04-oe-0.7.0-rc1-sgx:latest
#     # --publish-all enables end-to-end tests to communicate over ports
#     # --device /dev/sgx:/dev/sgx makes sgx available to the container
#     # -v $(log.path):$(log.path) mounts the local directory to the same path in the container
#     options: --publish-all --device /dev/sgx:/dev/sgx -v $(log.path):$(log.path)
#   dependsOn:
#     - ACC_1804_SGX_build
#   steps:
#     - checkout: self
#       clean: true
#       submodules: true
#     - template: .azure-pipelines-templates/download_build.yml
#       parameters:
#         artifact_name: build_results
#     - template: .azure-pipelines-templates/test.yml
#       parameters:
#         ctest_filter: '-LE "perf|end_to_end"'
#         suite_name_suffix: ' SGX quick tests'

# - job: ACC_1804_SGX_e2e_tests_A
#   pool: Ubuntu-1804-DC4s
#   container:
#     image: ccfciteam/ccf-ci-18.04-oe-0.7.0-rc1-sgx:latest
#     # --publish-all enables end-to-end tests to communicate over ports
#     # --device /dev/sgx:/dev/sgx makes sgx available to the container
#     # -v $(log.path):$(log.path) mounts the local directory to the same path in the container
#     options: --publish-all --device /dev/sgx:/dev/sgx -v $(log.path):$(log.path)
#   dependsOn:
#     - ACC_1804_SGX_build
#   steps:
#     - checkout: self
#       clean: true
#       submodules: true
#     - template: .azure-pipelines-templates/download_build.yml
#       parameters:
#         artifact_name: build_results
#     - template: .azure-pipelines-templates/test.yml
#       parameters:
#         ctest_filter: '-L end_to_end -I 0,,2'
#         suite_name_suffix: ' SGX end to end tests A'

# - job: ACC_1804_SGX_e2e_tests_B
#   pool: Ubuntu-1804-DC4s
#   container:
#     image: ccfciteam/ccf-ci-18.04-oe-0.7.0-rc1-sgx:latest
#     # --publish-all enables end-to-end tests to communicate over ports
#     # --device /dev/sgx:/dev/sgx makes sgx available to the container
#     # -v $(log.path):$(log.path) mounts the local directory to the same path in the container
#     options: --publish-all --device /dev/sgx:/dev/sgx -v $(log.path):$(log.path)
#   dependsOn:
#     - ACC_1804_SGX_build
#   steps:
#     - checkout: self
#       clean: true
#       submodules: true
#     - template: .azure-pipelines-templates/download_build.yml
#       parameters:
#         artifact_name: build_results
#     - template: .azure-pipelines-templates/test.yml
#       parameters:
#         ctest_filter: '-L end_to_end -I 1,,2'
#         suite_name_suffix: ' SGX end to end tests B'

# - job: ACC_1804_SGX_perf_build
#   pool: Ubuntu-1804-DC4s
#   container:
#     image: ccfciteam/ccf-ci-18.04-oe-0.7.0-rc1-sgx:latest
#     # --publish-all enables end-to-end tests to communicate over ports
#     # --device /dev/sgx:/dev/sgx makes sgx available to the container
#     # -v $(log.path):$(log.path) mounts the local directory to the same path in the container
#     options: --publish-all --device /dev/sgx:/dev/sgx -v $(log.path):$(log.path)
#   steps:
#     - checkout: self
#       clean: true
#       submodules: true
#     - template: .azure-pipelines-templates/build.yml
#       parameters:
#         cmake_args: '-DBUILD_SMALLBANK=ON -DSERVICE_IDENTITY_CURVE_CHOICE=secp256k1_bitcoin'
#     - template: .azure-pipelines-templates/publish_build.yml
#       parameters:
#         artifact_name: perf_build_results

# - job: ACC_1804_SGX_perf_tests
#   pool: Ubuntu-1804-DC4s
#   container:
#     image: ccfciteam/ccf-ci-18.04-oe-0.7.0-rc1-sgx:latest
#     # --publish-all enables end-to-end tests to communicate over ports
#     # --device /dev/sgx:/dev/sgx makes sgx available to the container
#     # -v $(log.path):$(log.path) mounts the local directory to the same path in the container
#     options: --publish-all --device /dev/sgx:/dev/sgx -v $(log.path):$(log.path)
#   dependsOn:
#     - ACC_1804_SGX_perf_build
#   steps:
#     - checkout: self
#       clean: true
#       submodules: true
#     - template: .azure-pipelines-templates/download_build.yml
#       parameters:
#         artifact_name: perf_build_results
#     - template: .azure-pipelines-templates/test.yml
#       parameters:
#         suite_name_suffix: ' SGX Performance'
#         ctest_filter: '-L perf'
#     - template: .azure-pipelines-templates/push_perf_data.yml

# - job: ePBFT
#   pool: Ubuntu-1804-DC4s
#   container:
#     image: ccfciteam/ccf-ci-18.04-oe-0.7.0-rc1-sgx:latest
#     # --publish-all enables end-to-end tests to communicate over ports
#     # --device /dev/sgx:/dev/sgx makes sgx available to the container
#     # -v $(log.path):$(log.path) mounts the local directory to the same path in the container
#     options: --publish-all --device /dev/sgx:/dev/sgx -v $(log.path):$(log.path)
#   dependsOn:
#     - ACC_1804_SGX_build

#   steps:
#     - checkout: self
#       clean: true
#       submodules: true

#     - script: mkdir build
#       displayName: 'Make a build directory'

#     - script: cmake -GNinja -DPBFT=ON -DBUILD_SMALLBANK=OFF ..
#       displayName: cmake
#       workingDirectory: build

#     - script: ninja
#       displayName: Ninja
#       workingDirectory: build

#     - script: |
#         ./tests.sh -VV --timeout 240 --no-compress-output -T Test
#       displayName: CTest
#       workingDirectory: build
#     - script: 'xsltproc --stringparam suiteName "$(Agent.MachineName) SGX" ../tests/infra/ctest_to_junit.xslt Testing/*/Test.xml > JUnit.xml'
#       displayName: XSLT
#       workingDirectory: build
#       condition: succeededOrFailed()

#     - task: PublishTestResults@2
#       inputs:
#         testResultsFiles: '**/JUnit.xml'
#         publishRunAttachments: true
#       condition: succeededOrFailed()